#!/bin/bash
#SBATCH -N 1
#SBATCH --cpus-per-task=1
#SBATCH -o 2.runMGTK_hybrid.mfc.otxt
#SBATCH -e 2.runMGTK_hybrid.mfc.etxt
#SBATCH --mem=22400
#SBATCH --export=ALL
#SBATCH -p "ei-medium,qib-medium,qib-long,ei-long"
#  SBATCH --time=248:00:00
# #SBATCH --localscratch=ssd:10
#SBATCH -J subPB
set -e
ulimit -c 0;

if [ ! -e $MGTKDIR/examples/data/SRR8797713_2.fq.gz ]; then
	echo "Input file not found (data/SRR8797713_2.fq.gz), run first 0.getExmplData.sh"
	exit
fi 

if [ ! -e $MGTKDIR/examples/data/SRR15489013_sub.fq.gz ]; then
	echo "Input file not found (data/SRR15489013_sub.fq.gz), run first 0.getExmplData.sh"
	exit
fi 






echo ""
echo ""
echo "Simple example (nonsensical data) for testing MG-TK hybrid, illumina + PacBio, workflow"
echo "Run, wait for all jobs to finish. Then rerun to capture unfinished tasks. Repeat until no further jobs are submitted"
echo "By default, these results will be saved in $MGTKDIR/examples/output/ dir for this test."
echo "    However, this is not recommended for larger runs, where it is better to keep the input data and results dir separate from the MG-TK dir."
echo ""
echo ""

MAP=$MGTKDIR//examples/maps/testPB.map

perl $MGTKDIR/MG-TK.pl -map $MAP -inputFQregexSingle '.*\.fastq\.gz' -inputFQregex1 '(.*_R1_001\.fastq\.gz)|(.*[_\.]1\.f[^\.]*q\.gz)$' -inputFQregex2 '(.*_R2_001\.fastq\.gz)|(.*[_\.]2\.f[^\.]*q\.gz)$' -mergeReads 0 -maxConcurrentJobs 800 \
-inputBAMregex '.*\.bam$' \
-assembleMG 5 -assemblCores 12 -assemblyKmers "25,43,67,87,111,127" -assemblMemory 50 \
-Binner 2 -redoBinning 0 \
-mapper -1 -mapSaveCRAM 0 -mappingCores 11 -mappingMem 12 -mapSortMem 13 -mapReadsOntoAssembly 1 -mapSupportReadsOntoAssembly 1 -mapperFilterIll '0.05 0.75 20' -mapperFilterPB '0.15 0.75 10' -rmDuplicates 1 \
-getAssemblConsSNP 1 -getAssemblConsSNPsuppRds 1 -SNPconsMinDepth 2 -SNPsaveVCF 0 \
-rmSmplLocks 1 \
-submit 1 -inputReadLength 150 -inputReadLengthSuppl 8000 \
-from 0 -to 10


echo ""
echo ""
echo "Yet more MG-TK options to explore in this .sh, while waiting for jobs to finish :)"

exit;


#-from 0 -to 99 -> start at sample 0 in .map, go until 99 samples. Hint: since this map only has 8 samples, MG-TK will stop at sample 8
#-assembleMG 5 : hybrid assembly
#-inputBAMregex '.*\.bam$' if PacBio reads are stored as .bam. In this example, they're stored as fastq, thus flag is actually not needed
#-mappingCores 12 -> use 12 cores for mapping tasks
#-mapSupportReadsOntoAssembly 1 -> also map the PacBio (support) reads onto the hybrid assembly. This will create a separate .cram in the map/ dir.
# -mappingMem 12 -mapSortMem 13 -> use 11 Gb and 13 Gb memory for the mapping and the sort mapping steps, respectively
#-mapperFilterIll '0.05 0.75 20' -mapperFilterPB '0.15 0.75 10'  -> post-map filtering of alignments for illumina and PacBio reads, respectively. E.g. illumina reads are kept if: <=5% ANI, >=75% of read aligned, >=20 mapping quality
#-rmDuplicates 1 -> remove duplicate reads detected by mapper/samtools
#if you want to remove host reads, you can create a kraken2 databases for the human genome and link it into MG-TK with this flag:
#-filterHostKrak2DB /path/to/kraken2/DB/human/ -filterHostRds 1 -> filter reads from host against specific, kraken2 database
